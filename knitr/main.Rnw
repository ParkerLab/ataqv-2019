\documentclass{article}
\usepackage[margin=1in]{geometry}
\usepackage{graphicx}
\pagestyle{empty}
\usepackage{floatrow}
\usepackage{subfig}
\captionsetup[subfigure]{labelformat=simple,position=top,justification=justified,singlelinecheck=false}
\captionsetup[figure]{labelformat=simple,labelsep=space,labelfont=bf}

\title{ataqv manuscript figures}

\begin{document}

\floatsetup[figure]{style=plain,subcapbesideposition=top}

\maketitle
\pagestyle{empty}
<<echo=F,include=F>>=
library(viridis)
library(dplyr)
library(tidyr)
library(ggplot2)
library(glue)
library(ggrepel)
library(RColorBrewer)

EXAMPLE_PROMOTER_PEAK <- 'chr1:40348854:40349418'
EXAMPLE_ENHANCER_PEAK <- 'chr12:125389290:125389653'

# just promoter regions 
HEATMAP_LIMITS <- data.frame(
  gene=c('GAPDH', 'CHMP2A', 'GPI', 'REEP5', 'VCP'),
  min=c(6643000, 59066000, 34855000, 112250000, 35071000),
  max=c(6645000, 59067000, 34860000, 112260000, 35074000)
)

ROOT <- Sys.getenv('ATAQV_HOME')

nuclear_isolation <- read.csv(file.path(ROOT, 'data', 'nuclei_isolation', 'nuclei_isolation.csv'), col.names = c('replicate', 'initial_cell_count', 'nuclei_concentration_1', 'nuclei_concentration_2', 'average_nuclei_concentration', 'average_nuclei_count', 'efficiency'))
for(i in colnames(nuclear_isolation)) {
  nuclear_isolation[,i] <- as.numeric(gsub(',', '', nuclear_isolation[,i]))
}
nuclear_isolation <- dplyr::select(nuclear_isolation, replicate, initial_cell_count, average_nuclei_count, efficiency)

tn5_levels <- c('0.2X', '0.5X', '0.66X', '1X', '1.5X', '2X', '5X')

tn5_replicate_colors <- c('#8c510a','#d8b365','#f6e8c3','#c7eae5','#5ab4ac','#01665e')
names(tn5_replicate_colors) <- paste0('', 1:6)

tn5_colors <- c('#0000ff','#2510a3','#1f1050','#000000','#52170b','#a51b0b','#ff0000')

chromhmm_colors <- c('weak_enhancer' = rgb(255,252,4,maxColorValue=255),
                     'strong_enhancer' = rgb(250,202,0,maxColorValue=255),
                     'transcribed' = rgb(0,176,80,maxColorValue=255),
                     'insulator' = rgb(10,190,254,maxColorValue=255),
                     'weak_promoter' = rgb(255,105,105,maxColorValue=255),
                     'active_promoter' = rgb(255,0,0,maxColorValue=255),
                     'poised_promoter' = rgb(207,11,198,maxColorValue=255),
                     'repressed' = rgb(127,127,127,maxColorValue=255),
                     'low_signal' = rgb(0,0,0,maxColorValue=255))
chromhmm_color_labels <- gsub('_', ' ', names(chromhmm_colors))
names(chromhmm_color_labels) <- names(chromhmm_colors)


metric_names <- c(hqaa = 'High-quality autosomal reads',
                  percent_autosomal_duplicate = '% autosomal duplicate',
                  percent_mitochondrial = '% mitochondrial reads',
                  median_fragment_length = 'Median fragment length (bp)',
                  total_peaks = 'Number of peaks',
                  total_reads = 'Total number of reads',
                  hqaa_overlapping_peaks_percent = '% high-quality autosomal\nreads overlapping peaks',
                  tss_enrichment = 'TSS enrichment',
                  short_mononucleosomal_ratio = 'Short : mononucleosomal reads',
                  fragment_length_distance = 'Fragment length distance')


# load in key data files/set key universal variables
# public data
sample_info.public <- read.table(file.path(ROOT, 'public_survey', 'sample_info', 'sample_info.txt'), head = T, as.is = T, sep = '\t')
project_colors <- viridis(n = length(unique(sample_info.public$project)))
names(project_colors) <- unique(sample_info.public$project)
metrics.public <- read.table(file.path(ROOT, 'figures', 'public', 'metrics.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'metric', 'value')) %>% dplyr::mutate(library=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
fragment_lengths.public <- read.table(file.path(ROOT, 'figures', 'public', 'fragment_length_distributions.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'fragment_length', 'count', 'fraction')) %>% dplyr::mutate(experiment=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
tss_coverage.public <- read.table(file.path(ROOT, 'figures', 'public', 'tss_coverage.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'position', 'coverage')) %>% dplyr::mutate(experiment=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
heatmap.public <- bind_rows(lapply(list.files(file.path(ROOT, 'public_survey', 'work', 'heatmaps'), pattern = '.coverage.bed', full.names = T), function(f) {
  RE <- '^(.*)\\.(.*)_coverage.bed$'
  lib <- gsub(RE, '\\1', basename(f))
  gene <- gsub(RE, '\\2', basename(f))
  tmp <- read.table(f, head = F, as.is = T, colClasses = c('character', 'numeric', 'numeric', 'numeric'), col.names = c('chrom', 'start', 'end', 'coverage'))
  tmp$library <- lib
  tmp$gene <- gene
  return(tmp)
}))



# tn5
sample_info.tn5 <- read.table(file.path(ROOT, 'tn5', 'sample_info', 'sample_info.txt'), head = T, as.is = T, sep = '\t')
sample_info.tn5$tn5 <- factor(sample_info.tn5$tn5, levels = tn5_levels, ordered = T)
sample_info.tn5$library <- as.character(sample_info.tn5$library)
fragment_lengths.tn5 <- read.table(file.path(ROOT, 'figures', 'tn5', 'fragment_length_distributions.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'fragment_length', 'count', 'fraction')) %>% dplyr::mutate(library=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
tss_coverage.tn5 <- read.table(file.path(ROOT, 'figures', 'tn5', 'tss_coverage.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'position', 'coverage')) %>% dplyr::mutate(library=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
metrics.tn5 <- read.table(file.path(ROOT, 'figures', 'tn5', 'metrics.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'metric', 'value')) %>% dplyr::mutate(library=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
heatmap.tn5 <- bind_rows(lapply(list.files(file.path(ROOT, 'tn5', 'work', 'heatmaps'), pattern = '.coverage.bed', full.names = T), function(f) {
  RE <- '^(.*)\\.(.*)_coverage.bed$'
  lib <- gsub(RE, '\\1', basename(f))
  gene <- gsub(RE, '\\2', basename(f))
  tmp <- read.table(f, head = F, as.is = T, colClasses = c('character', 'numeric', 'numeric', 'numeric'), col.names = c('chrom', 'start', 'end', 'coverage'))
  tmp$library <- lib
  tmp$gene <- gene
  return(tmp)
}))
chromhmm_overlap.tn5 <- bind_rows(lapply(list.files(file.path(ROOT, 'tn5', 'work', 'read_chromhmm_overlaps'), full.names = T, pattern = '.counts.bed'), function(f){
  tmp <- read.table(f, head = F, as.is = T)
  colnames(tmp) <- c('read_count', 'chromatin_state')
  tmp$library <- gsub('.counts.bed', '', basename(f))
  return(tmp)}))
tf_overlap.tn5 <- bind_rows(lapply(list.files(file.path(ROOT, 'tn5', 'work', 'read_tf_overlaps'), full.names = T, pattern = '.tf_overlap.txt'), function(f){
  RE <- '^(.*)\\.tf_overlap.txt$'
  lib <- gsub(RE, '\\1', basename(f))

  tmp <- read.table(f, head = F, as.is = T, sep = '\t', col.names = c('experiment', 'count')) %>% tidyr::separate(col = experiment, into = c('factor', 'accession'))
  total_reads <- read.table(gsub('.tf_overlap.txt', '.total_reads', f), head = F, as.is = T)$V1
  tmp$library <- lib
  tmp$proportion_of_reads_overlapping_peak <- tmp$count / total_reads
  tmp <- tmp[,c('library', 'factor', 'accession', 'proportion_of_reads_overlapping_peak')]
  return(tmp)
}))
peak_counts.tn5 <- bind_rows(lapply(list.files(file.path(ROOT, 'tn5', 'work', 'master_peak_counts', 'counts'), pattern = '\\.counts\\.bed$', full.names = T),
                          function(f){
  x <- read.table(f, head = F, as.is = T, sep = '\t', col.names = c('chrom', 'start', 'end', 'count'))
  x$library <- gsub('.counts.bed', '', basename(f))
  return(x)
}))
modeling.tn5 <- bind_rows(lapply(list.files(file.path(ROOT, 'tn5', 'work', 'tn5_sensitive_peaks', 'results'), pattern = 'results.txt', full.names = T), function(f){
  RE <- 'covariates_(.*)_subsample_(.*).results.txt'
  covariates <- gsub(RE, '\\1', basename(f))
  subsampled <- gsub(RE, '\\2', basename(f))
  tmp <- read.table(f, head = T, as.is = T, sep = '\t')
  tmp$covariates <- gsub('___', ',', covariates)
  return(tmp)
}))
tf_peak_overlap.tn5 <- bind_rows(lapply(list.files(file.path(ROOT, 'figures', 'tn5'), pattern = 'peak_overlap.bed', full.names = T), function(f){
  RE <- '^(.*)\\.peak_overlap\\.bed$'
  experiment <- gsub(RE, '\\1', basename(f))
  tmp <- read.table(f, head = F, as.is = T, sep = '\t')
  colnames(tmp) <- c('chrom', 'start', 'end', 'overlaps')
  tmp$experiment <- experiment
  return(tmp)
})) %>% dplyr::mutate(overlaps=overlaps>0, peak=glue('{chrom}:{start}:{end}'))
tss_coverage.ENCODE.tn5 <-  bind_rows(lapply(list.files(file.path(ROOT, 'tn5', 'work', 'tss_enrichment.ENCODE'), pattern = '.txt', full.names = T), function(f){
  tmp <- read.table(f, head = F, as.is = T, sep = '\t', col.names = c('position', 'coverage'))
  tmp$library <- gsub('.tss_coverage.txt', '', basename(f))
  return(tmp)
}))
tss_coverage.ataqv.tn5 <- bind_rows(lapply(list.files(file.path(ROOT, 'tn5', 'work', 'tss_enrichment.ataqv'), pattern = '.txt', full.names = T), function(f){
  tmp <- read.table(f, head = F, as.is = T, sep = '\t', col.names = c('position', 'coverage'))
  tmp$library <- gsub('.tss_coverage.txt', '', basename(f))
  return(tmp)
}))
tss_coverage.cutsite.tn5 <- bind_rows(lapply(list.files(file.path(ROOT, 'tn5', 'work', 'tss_enrichment.cutsite'), pattern = '.txt', full.names = T), function(f){
  tmp <- read.table(f, head = F, as.is = T, sep = '\t', col.names = c('position', 'coverage'))
  tmp$library <- gsub('.tss_coverage.txt', '', basename(f))
  return(tmp)
}))


# cluster density
sample_info.cd <- read.table(file.path(ROOT, 'cluster_density', 'sample_info', 'sample_info.txt'), head = T, as.is = T, sep = '\t')
sample_info.cd$tn5 <- factor(sample_info.cd$tn5, levels = tn5_levels, ordered = T)
sample_info.cd$library <- as.character(sample_info.cd$library)
fragment_lengths.cd <- read.table(file.path(ROOT, 'figures', 'cd', 'fragment_length_distributions.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'fragment_length', 'count', 'fraction')) %>% dplyr::mutate(library=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
tss_coverage.cd <- read.table(file.path(ROOT, 'figures', 'cd', 'tss_coverage.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'position', 'coverage')) %>% dplyr::mutate(library=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
metrics.cd <- read.table(file.path(ROOT, 'figures', 'cd', 'metrics.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'metric', 'value')) %>% dplyr::mutate(library=gsub('.json.gz', '', basename(file))) %>% dplyr::select(-file)
chromhmm_overlap.cd <- bind_rows(lapply(list.files(file.path(ROOT, 'cluster_density', 'work', 'read_chromhmm_overlaps'), full.names = T, pattern = '.counts.bed'), function(f){
  tmp <- read.table(f, head = F, as.is = T)
  colnames(tmp) <- c('read_count', 'chromatin_state')
  tmp$library <- gsub('.counts.bed', '', basename(f))
  return(tmp)}))
peak_chromhmm_overlap.cd <- bind_rows(lapply(list.files(file.path(ROOT, 'cluster_density', 'work', 'peak_chromhmm_overlaps'), full.names = T, pattern = '.counts.txt'), function(f){
  tmp <- read.table(f, head = F, as.is = T)
  colnames(tmp) <- c('count', 'chromatin_state')
  tmp$proportion <- tmp$count / sum(tmp$count)
  tmp$library <- gsub('.counts.txt', '', basename(f))
  return(tmp)}))
peak_chromhmm_overlap_subsample.cd <- bind_rows(lapply(list.files(file.path(ROOT, 'cluster_density', 'work', 'subsample.peak_chromhmm_overlaps'), full.names = T, pattern = '.counts.txt'), function(f){
  tmp <- read.table(f, head = F, as.is = T)
  colnames(tmp) <- c('count', 'chromatin_state')
  tmp$proportion <- tmp$count / sum(tmp$count)
  tmp$library <- gsub('.counts.txt', '', basename(f))
  return(tmp)}))

modeling.cd <- bind_rows(lapply(list.files(file.path(ROOT, 'cluster_density', 'work', 'tn5_sensitive_peaks', 'results'), pattern = 'results.txt', full.names = T), function(f){
  RE <- 'covariates_(.*)_subsample_(.*).results.txt'
  covariates <- gsub(RE, '\\1', basename(f))
  subsampled <- gsub(RE, '\\2', basename(f))
  tmp <- read.table(f, head = T, as.is = T, sep = '\t')
  tmp$covariates <- gsub('___', ',', covariates)
  return(tmp)
}))

tss_coverage.ENCODE.cd <-  bind_rows(lapply(list.files(file.path(ROOT, 'cluster_density', 'work', 'tss_enrichment.ENCODE'), pattern = '.txt', full.names = T), function(f){
  tmp <- read.table(f, head = F, as.is = T, sep = '\t', col.names = c('position', 'coverage'))
  tmp$library <- gsub('.tss_coverage.txt', '', basename(f))
  return(tmp)
}))
tss_coverage.ataqv.cd <- bind_rows(lapply(list.files(file.path(ROOT, 'cluster_density', 'work', 'tss_enrichment.ataqv'), pattern = '.txt', full.names = T), function(f){
  tmp <- read.table(f, head = F, as.is = T, sep = '\t', col.names = c('position', 'coverage'))
  tmp$library <- gsub('.tss_coverage.txt', '', basename(f))
  return(tmp)
}))
tss_coverage.cutsite.cd <- bind_rows(lapply(list.files(file.path(ROOT, 'cluster_density', 'work', 'tss_enrichment.cutsite'), pattern = '.txt', full.names = T), function(f){
  tmp <- read.table(f, head = F, as.is = T, sep = '\t', col.names = c('position', 'coverage'))
  tmp$library <- gsub('.tss_coverage.txt', '', basename(f))
  return(tmp)
}))

# global functions
# for converting between numeric Tn5 and Factor Tn5
# Example usage:
# as.factor.tn5('2')
# as.numeric.tn5(as.factor.tn5('2'))
tn5_conversions <- data.frame(num=c(0.2, 0.5, 0.66, 1, 1.5, 2, 5))
tn5_conversions$fac <- factor(paste(tn5_conversions$num, 'X', sep=''), paste(tn5_conversions$num, 'X', sep = ''), ordered = T)
rownames(tn5_conversions) <- as.character(tn5_conversions$fac)

as.numeric.tn5 <- function(tn5) {
  return(as.numeric(as.character(gsub('X', '', tn5))))
}

as.factor.tn5 <- function(tn5) {
  if (is.character(tn5)) {
    return(tn5_conversions[tn5,'fac'])
  } else if (is.numeric(tn5)) {
    return(tn5_conversions[paste(tn5, 'X', sep=''),'fac'])
  }
}


counts_to_rpkm <- function(counts_vector, lengths) {
  # lengths indicates the lengths (in bp) of each of the corresponding regions
  stopifnot(length(counts_vector) == length(lengths))

  counts_sum <- sum(counts_vector)

  # to reduce the probability of integer overflow,
  # enforce a certain order of operations
  rpkm <- counts_vector * (((10^9) / (lengths)) / counts_sum)

  return(rpkm)
}

@



% Now do the plotting

%%%%%%%%%%%%%%%%
% MAIN FIGURES
%%%%%%%%%%%%%%%%

% Nuclear isolation efficiency
<<echo = F, include = F>>=
p <- ggplot(nuclear_isolation) + geom_bar(aes(x = replicate, y = efficiency), stat = 'identity') + theme_bw() +
  ylab('Efficiency of nuclear isolation') + xlab('Replicate') +
  scale_x_continuous(breaks = sort(unique(nuclear_isolation$replicate))) +
  scale_y_continuous(breaks = seq(0, 1, by = 0.2), limits = c(0, 0.6))
pdf('nuclear_isolation_efficiency.pdf', height = 3, width = 4)
print(p)
dev.off()
@

% Plots of the public data
<<public_data_overview, echo=F,include=F>>=
sample_info <- sample_info.public
metrics <- metrics.public
#metrics_flowcell <- metrics_flowcell.public
heatmap <- heatmap.public
fragment_length_distributions <- fragment_lengths.public
fragment_length_distributions$experiment <- factor(fragment_length_distributions$experiment, levels = sample(unique(fragment_length_distributions$experiment)), ordered = T)
fragment_length_distributions <- fragment_length_distributions[order(fragment_length_distributions$experiment, fragment_length_distributions$fragment_length),]

tss_enrichment <- tss_coverage.public
tss_enrichment$experiment <- factor(tss_enrichment$experiment, levels = sample(unique(tss_enrichment$experiment)), ordered = T)
tss_enrichment <- tss_enrichment[order(tss_enrichment$experiment, tss_enrichment$position),]


# characterize public metadata for Fig 1
tmp <- sample_info %>% dplyr::group_by(experiment, project, organism, is_single_cell) %>%
              dplyr::summarize(n_reads=sum(as.numeric(spots)))
tmp$is_single_cell <- ifelse(tmp$is_single_cell, 'single cell', 'bulk')
tmp$Species <- ifelse(tmp$organism=='Mus musculus','mouse','human')
tmp$label <- paste(tmp$Species, tmp$is_single_cell)
counts_per_group <- as.data.frame(table(tmp$label))
colnames(counts_per_group) <- c('label', 'count')
tmp <- left_join(tmp, counts_per_group)
tmp$label <- paste0(tmp$label, '\n(N = ', tmp$count, ')')
tmp$label <- factor(tmp$label, levels = rev(sort(unique(tmp$label))), ordered = T)
p <- ggplot(tmp) + geom_jitter(aes(x = label, y = log10(n_reads), color = project), stat = 'identity', width = 0.4, height = 0, alpha = 0.3, stroke = 0) +
  scale_color_manual(values = project_colors, guide = F) +
  xlab('') +
  ylab('Log10(read pairs in library)') +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
pdf('public_meta.pdf', height = 3.5, width = 2.5)
p
dev.off()



# perhaps facet by organism, color by cell type
# or have cell type along one axis, use alpha for single_cell, use size for log10(n_reads) or log10(n_libraries)

# heatmap of housekeeping genes
tmp <- heatmap %>%
  left_join(metrics %>% dplyr::filter(metric %in% c('hqaa', 'tss_enrichment'))) %>%
  tidyr::spread(key = metric, value = value, convert = T) %>%
  dplyr::filter(hqaa>=5e6) %>%
  dplyr::mutate(coverage=coverage/(hqaa/1e6),
                location=(start+end)/2) %>%
  left_join(sample_info %>% dplyr::select(experiment, project) %>% dplyr::rename(library=experiment))
tmp <- tmp[rev(order(tmp$project)),]
tmp$library <- factor(tmp$library, levels = unique(tmp$library), ordered = T)
number_libraries <- length(unique(tmp$library))

library(ggbio)
library(Homo.sapiens)
class(Homo.sapiens)
data(genesymbol, package = 'biovizBase')

GENES <- unique(heatmap$gene)[toupper(unique(heatmap$gene)) %in% toupper(names(genesymbol))]
GENES <- GENES[toupper(GENES) %in% toupper(HEATMAP_LIMITS$gene)]
for(gene in GENES) {
  print(gene)
  limits <- c(min(heatmap$start[heatmap$gene==gene]), max(heatmap$end[heatmap$gene==gene]))
  if (gene %in% HEATMAP_LIMITS$gene) {
    limits <- c(HEATMAP_LIMITS$min[HEATMAP_LIMITS$gene==gene], HEATMAP_LIMITS$max[HEATMAP_LIMITS$gene==gene])
  }
  
  fake <- unique(tmp[,c('gene', 'project', 'library')])
  fake$x1 <- limits[1]
  fake$x2 <- limits[1] - 200
  fake <- fake %>% tidyr::gather(key = x, value = value, x1, x2)
  
  
  p <- ggplot(tmp[tmp$gene==gene & tmp$start>=limits[1] & tmp$end<=limits[2],]) + geom_tile(aes(x = location, y = library, fill = coverage)) +
    scale_fill_gradient(low = 'white', high = 'red') +
    xlab('Chromosomal coordinate') + ylab(glue('{number_libraries} human bulk libraries')) +
    theme_bw() + geom_line(aes(x = value, y = library, color = project), data = fake) +
    guides(color = F, fill=guide_colorbar(title='Cuts per million\nmapped reads')) +
    scale_y_discrete(labels = NULL) +
    scale_x_discrete(expand = c(0, 0), limits = c(limits[1]-200, limits[2])) +
    scale_color_manual(values = project_colors, guide = F) +
    theme(legend.position = 'top', legend.direction = 'horizontal')

  gene_model_limits <- c(min(limits[1], as.data.frame(range(genesymbol[which(toupper(names(genesymbol))==toupper(gene))]))$start),
                         max(limits[2], as.data.frame(range(genesymbol[which(toupper(names(genesymbol))==toupper(gene))]))$end))
  p.txdb <- autoplot(Homo.sapiens, which = range(makeGRangesFromDataFrame(data.frame(seqnames = unique(seqnames(range(genesymbol[which(toupper(names(genesymbol))==toupper(gene))]))), start = gene_model_limits[1], end = gene_model_limits[2]))), ignore.strand = T)
  pdf(glue('public_{gene}.pdf'), height = 4, width = 3)
  print(tracks(p, p.txdb + theme_bw(), heights = c(3, 1), xlab='Chromosomal coordinate', xlim = c(limits[1]-200, limits[2])))
  dev.off()
  
  # remove the y-axis label and the project colors
  p <- ggplot(tmp[tmp$gene==gene & tmp$start>=limits[1] & tmp$end<=limits[2],]) + geom_tile(aes(x = location, y = library, fill = coverage)) +
    scale_fill_gradient(low = 'white', high = 'red') +
    xlab('Chromosomal coordinate') + ylab('') +
    theme_bw() + geom_line(aes(x = value, y = library, color = project), data = fake) +
    guides(color = F, fill=guide_colorbar(title='Cuts per million\nmapped reads')) +
    scale_y_discrete(labels = NULL) +
    scale_x_discrete(expand = c(0, 0), limits = c(limits[1], limits[2])) +
    scale_color_manual(values = project_colors, guide = F) +
    theme(legend.position = 'top', legend.direction = 'horizontal')
  
  pdf(glue('public_{gene}_no_y_axis.pdf'), height = 4, width = 3)
  print(tracks(p, p.txdb + theme_bw(), heights = c(3, 1), xlab='Chromosomal coordinate', xlim = c(limits[1], limits[2])))
  dev.off()

}

detach("package:ggbio", unload=TRUE)

tmp <- metrics %>%
  tidyr::spread(key = metric, value = value, convert = T) %>%
  left_join(sample_info %>% dplyr::select(experiment, project) %>% dplyr::rename(library=experiment)) %>%
  unique()
p <- ggplot(tmp) + geom_point(aes(x = median_fragment_length, y = tss_enrichment, color = project), alpha = 0.5, stroke = 0) +
  geom_text(aes(x = 250, y = 20, label = paste0('N = ', nrow(tmp))), data = data.frame()) +
  theme_bw() + xlab('Median fragment length (bp)') + ylab('TSS enrichment') +
  scale_color_manual(values = project_colors, guide = F) +
  theme(axis.title.x = element_text(color = rgb(0, 174, 239, maxColorValue = 255)),
        axis.title.y = element_text(color = rgb(139, 94, 60, maxColorValue = 255)))
pdf('public_median_fragment_length_vs_tss_enrichment.pdf', height = 3, width = 3)
print(p)
dev.off()

total_number_public_read_pairs <- round(sum(sample_info$spots)/1e9, 1)
number_bulk_samples_shown <- length(unique(sample_info$experiment[!sample_info$is_single_cell]))

FOLD_DIFFERENCES <- metrics %>%
  dplyr::group_by(metric) %>%
  dplyr::summarize(max_value=max(value),
                   min_value=min(value),
                   fc=max_value/min_value)


# heterogeneity within studies
STUDIES_TO_SHOW <- c('PRJNA259243', 'PRJNA306754') # Qu et al, Ackermann
EXPERIMENTS_TO_SHOW <- sample_info.public$experiment[sample_info.public$project %in% STUDIES_TO_SHOW]
p1 <- fragment_length_distributions %>% dplyr::filter(experiment %in% EXPERIMENTS_TO_SHOW) %>% 
  left_join(sample_info.public %>% dplyr::select(experiment, project) %>% unique()) %>%
  ggplot() + geom_line(aes(x = fragment_length, y = fraction, color = experiment), alpha = 0.5) +
  guides(color=F) + xlab('Fragment length (bp)') + ylab('Fraction of reads') +
  coord_cartesian(xlim = c(0, 500)) +
  theme_bw() +
  facet_wrap(~project, ncol=1)

p2 <- tss_enrichment %>% dplyr::filter(experiment %in% EXPERIMENTS_TO_SHOW) %>% 
  left_join(sample_info.public %>% dplyr::select(experiment, project) %>% unique()) %>%
  ggplot() + geom_line(aes(x = position, y = coverage, color = experiment), alpha = 0.5) +
  guides(color=F) +
  xlab('Position relative to TSS (bp)') +
  ylab('Normalized read coverage') +
  theme_bw() +
  facet_wrap(~project, ncol=1)


pdf('public_intrastudy_heterogeneity_fragment_length_distributions.pdf', height = 4, width = 3)
print(p1)
dev.off()

pdf('public_intrastudy_heterogeneity_tss_enrichment.pdf', height = 4, width = 3)
print(p2)
dev.off()

@


% Now plots of our original data
% First, Tn5 plots
<<echo=F, include=F>>=
sample_info <- sample_info.tn5
fragment_lengths <- fragment_lengths.tn5
tss_coverages <- tss_coverage.tn5
metrics <- metrics.tn5
heatmap <- heatmap.tn5
chromhmm_overlap <- chromhmm_overlap.tn5
tf_overlap <- tf_overlap.tn5 # read level
modeling <- modeling.tn5
tf_peak_overlap <- tf_peak_overlap.tn5 # peak level
peak_counts <- peak_counts.tn5

fragment_lengths <- left_join(fragment_lengths, sample_info %>% dplyr::select(library, tn5, replicate))
tmp <- fragment_lengths %>% dplyr::filter(replicate=='rep6') %>%
                                 dplyr::filter(tn5 %in% c('0.5X', '1X', '2X'))
tmp$tn5 <- factor(tmp$tn5, levels = c('2X', '1X', '0.5X'), ordered = T)
fragment_length_plot <- ggplot(tmp) +
  geom_line(aes(x = fragment_length, y = fraction, color = tn5)) +
  scale_color_manual(values = c('2X' = tn5_colors[6], '0.5X' = tn5_colors[2], '1X' = tn5_colors[4]), labels = c('2', '1', '0.5')) +
  theme_bw() +
  coord_cartesian(xlim=c(0, 500)) +
  guides(color = guide_legend(title = 'Relative\n[Tn5]', override.aes = list(shape = 22))) +
  xlab("Fragment length (bp)") + ylab("Fraction of fragments") +
  theme(axis.text=element_text(size=13), axis.title=element_text(size=15), legend.text=element_text(size=10), legend.title=element_text(size=12),
        legend.position = c(0.7, 0.7))

pdf('tn5_fragment_length_distributions.pdf', height = 3, width = 3)
print(fragment_length_plot)
dev.off()



tss_coverages <- left_join(tss_coverages, sample_info %>% dplyr::select(library, tn5, replicate))
tmp <- tss_coverages %>% dplyr::filter(replicate=='rep6') %>%
                                 dplyr::filter(tn5 %in% c('0.5X', '1X', '2X'))
tmp$tn5 <- factor(tmp$tn5, levels = c('2X', '1X', '0.5X'), ordered = T)
tss_coverages_plot <- ggplot(tmp) +
  geom_line(aes(x = position, y = coverage, color = tn5)) +
  scale_color_manual(values = c('0.5X' = tn5_colors[2], '1X' = tn5_colors[4], '2X' = tn5_colors[6]), labels = c('2', '1', '0.5')) +
  theme_bw() +
  xlab("Position relative to TSS") + ylab("Normalized read coverage") +
  ylim(c(0, max(tss_coverages$coverage))) +
  guides(color = guide_legend(title = 'Relative\n[Tn5]')) +
  theme(axis.text=element_text(size=13), axis.title=element_text(size=15), legend.position = c(0.8, 0.7), legend.text = element_text(size=10), legend.title=element_text(size=12))

pdf('tn5_tss_enrichment.pdf', height = 3, width = 3)
print(tss_coverages_plot)
dev.off()



tss_enrichment <- left_join(metrics, sample_info %>% dplyr::select(library, tn5, replicate, experiment)) %>%
  dplyr::filter(metric=='tss_enrichment')
tss_enrichment$tn5 <- log2(as.numeric.tn5(tss_enrichment$tn5))
tss_enrichment$replicate <- gsub('rep', '', tss_enrichment$replicate)

p <- ggplot(tss_enrichment) +
  geom_point(aes(x = tn5, y = value, color = replicate)) +
  geom_line(aes(x = tn5, y = value, color = replicate)) +
  scale_color_manual(values=tn5_replicate_colors) +
  xlab("log2(Relative [Tn5])") +
  ylab('TSS enrichment') +
  theme_bw() +
  theme(axis.text=element_text(size=13))+
  theme(axis.title=element_text(size=15)) +
  guides(color = guide_legend(nrow = 3, title = element_text('Replicate')))

pdf('tn5_tss_enrichment_all_six.pdf', height = 3, width = 4)
print(p)
dev.off()



median_fragment_length <- left_join(metrics, sample_info %>% dplyr::select(library, tn5, replicate, experiment)) %>%
  dplyr::filter(metric=='median_fragment_length')
median_fragment_length$tn5 <- log2(as.numeric.tn5(median_fragment_length$tn5))
median_fragment_length$replicate <- gsub('rep', '', median_fragment_length$replicate)

p <- ggplot(median_fragment_length) +
  geom_point(aes(x = tn5, y = value, color = replicate)) +
  geom_line(aes(x = tn5, y = value, color = replicate)) +
  scale_color_manual(values=tn5_replicate_colors) +
  xlab("log2(Relative [Tn5])") +
  ylab('Median fragment length (bp)') +
  theme_bw() +
  theme(axis.text=element_text(size=13))+
  theme(axis.title=element_text(size=13)) +
  guides(color = guide_legend(nrow = 3, title = element_text('Replicate')))

pdf('tn5_median_fragment_length_all_six.pdf', height = 3, width = 4)
print(p)
dev.off()




hqaa_overlapping_peaks_percent <- left_join(metrics, sample_info %>% dplyr::select(library, tn5, replicate, experiment)) %>%
  dplyr::filter(metric=='hqaa_overlapping_peaks_percent')
hqaa_overlapping_peaks_percent$tn5 <- log2(as.numeric.tn5(hqaa_overlapping_peaks_percent$tn5))
hqaa_overlapping_peaks_percent$replicate <- gsub('rep', '', hqaa_overlapping_peaks_percent$replicate)

p <- ggplot(hqaa_overlapping_peaks_percent) +
  geom_point(aes(x = tn5, y = value, color = replicate)) +
  geom_line(aes(x = tn5, y = value, color = replicate)) +
  scale_color_manual(values=tn5_replicate_colors) +
  xlab("log2(Relative [Tn5])") +
  ylab('% reads\noverlapping peaks') +
  theme_bw() +
  theme(axis.text=element_text(size=13))+
  theme(axis.title=element_text(size=15)) +
  guides(color = guide_legend(nrow = 3, title = element_text('Replicate'))) +
  theme(legend.position = c(0.75, 0.3), legend.background = element_blank())

pdf('tn5_hqaa_overlapping_peaks_percent.pdf', height = 3, width = 4)
print(p)
dev.off()



mitochondrial_percent <- left_join(metrics, sample_info %>% dplyr::select(library, tn5, replicate, experiment)) %>%
  dplyr::filter(metric=='percent_mitochondrial')
mitochondrial_percent$tn5 <- log2(as.numeric.tn5(mitochondrial_percent$tn5))
mitochondrial_percent$replicate <- gsub('rep', '', mitochondrial_percent$replicate)

p <- ggplot(mitochondrial_percent) +
  geom_point(aes(x = tn5, y = value, color = replicate)) +
  geom_line(aes(x = tn5, y = value, color = replicate)) +
  scale_color_manual(values=tn5_replicate_colors) +
  xlab("log2(Relative [Tn5])") +
  ylab('% mitochondrial reads') +
  theme_bw() +
  theme(axis.text=element_text(size=13))+
  theme(axis.title=element_text(size=15)) +
  guides(color = guide_legend(nrow = 3, title = element_text('Replicate')))

pdf('tn5_mitochondrial_percent.pdf', height = 3, width = 4)
print(p)
dev.off()



# proportion of reads that are usable, post-filtering
proportion_usable <- metrics %>% dplyr::filter(metric %in% c('total_reads', 'hqaa')) %>%
  tidyr::spread(key = metric, value = value, convert = T) %>%
  dplyr::mutate(proportion_usable = hqaa/total_reads) %>%
  left_join(sample_info)

p <- ggplot(proportion_usable) + geom_line(aes(x = log2(as.numeric.tn5(tn5)), y = proportion_usable, color = gsub('rep', '', replicate))) +
  geom_point(aes(x = log2(as.numeric.tn5(tn5)), y = proportion_usable, color = gsub('rep', '', replicate))) +
  scale_color_manual(values=tn5_replicate_colors) + theme_bw() +
  xlab('log2(Relative [Tn5])') + ylab('Proportion of reads remaining\nafter deduplication and filtering') + guides(color=guide_legend(title='Replicate'))
pdf('tn5_proportion_hqaa.pdf', height = 3, width = 4)
print(p)
dev.off()


# proportion of reads that are duplicates
proportion_duplicates <- metrics %>% dplyr::filter(metric %in% c('total_reads', 'duplicate_reads')) %>%
  tidyr::spread(key = metric, value = value) %>%
  dplyr::mutate(proportion_duplicates = duplicate_reads/total_reads) %>%
  left_join(sample_info)
p <- ggplot(proportion_duplicates) + geom_line(aes(x = log2(as.numeric.tn5(tn5)), y = proportion_duplicates, color = gsub('rep', '', replicate))) +
  geom_point(aes(x = log2(as.numeric.tn5(tn5)), y = proportion_duplicates, color = gsub('rep', '', replicate))) +
  scale_color_manual(values=tn5_replicate_colors) + theme_bw() +
  xlab('log2(Relative [Tn5])') + ylab('Proportion of reads\nthat are duplicates') + guides(color=guide_legend(title='Replicate'))
pdf('tn5_proportion_duplicate.pdf', height = 3, width = 4)
print(p)
dev.off()





counts <- left_join(chromhmm_overlap, sample_info)
counts$tn5 <- log2(as.numeric(gsub('X', '', counts$tn5)))
reads_per_lib <- counts %>% dplyr::group_by(library) %>% dplyr::summarize(total_reads=sum(read_count))
counts <- left_join(counts, reads_per_lib)
counts$proportion_of_reads <- counts$read_count / counts$total_reads
merge_reps <- counts %>% dplyr::select(chromatin_state, proportion_of_reads, tn5) %>% dplyr::group_by(tn5, chromatin_state) %>% dplyr::summarize(mean_proportion=mean(proportion_of_reads), median_proportion=median(proportion_of_reads))
# change the order of the chromatin states so that the order in the legend matches the order of the lines on the plot
tmp <- merge_reps[merge_reps$tn5==max(merge_reps$tn5),]
tmp <- tmp[order(tmp$median_proportion),]
chromatin_state_order <- rev(tmp$chromatin_state)
merge_reps$chromatin_state <- factor(merge_reps$chromatin_state, levels = chromatin_state_order, ordered = T)

p <- ggplot(merge_reps) + geom_line(aes(x = tn5, y = median_proportion, color = chromatin_state)) +
  geom_point(aes(x = tn5, y = median_proportion, color = chromatin_state)) +
  scale_color_manual(values=chromhmm_colors, labels = chromhmm_color_labels) +
  theme_bw() + xlab('log2(Relative [Tn5])') + ylab('Median proportion of reads from\nlibrary overlapping chromatin state') +
  guides(color=guide_legend(title = 'Chromatin state')) +
  theme(legend.position = 'left', legend.background = element_rect(color = 'black', fill = NA))
pdf('tn5_chromatin_state_overlap.pdf', width = 5, height = 3)
print(p)
dev.off()




# heatmap of gapdh
tmp <- heatmap %>%
  left_join(metrics %>% dplyr::filter(metric %in% c('hqaa', 'tss_enrichment'))) %>%
  tidyr::spread(key = metric, value = value) %>%
  dplyr::mutate(coverage=coverage/(hqaa/1e6),
                location=(start+end)/2) %>%
  left_join(sample_info %>% dplyr::select(library, tn5))
tmp <- tmp[order(tmp$tn5),]
tmp$library <- factor(tmp$library, levels = unique(tmp$library), ordered = T)


library(ggbio)
GENES <- unique(heatmap$gene)[toupper(unique(heatmap$gene)) %in% toupper(names(genesymbol))]
GENES <- GENES[toupper(GENES) %in% toupper(HEATMAP_LIMITS$gene)]
for(gene in GENES) {

  limits <- c(min(heatmap$start[heatmap$gene==gene]), max(heatmap$end[heatmap$gene==gene]))
  if (gene %in% HEATMAP_LIMITS$gene) {
    limits <- c(HEATMAP_LIMITS$min[HEATMAP_LIMITS$gene==gene], HEATMAP_LIMITS$max[HEATMAP_LIMITS$gene==gene])
  }
  
  fake <- unique(tmp[,c('gene', 'tn5', 'library')])
  fake$x1 <- limits[1]
  fake$x2 <- limits[1] - 200
  fake <- fake %>% tidyr::gather(key = x, value = value, x1, x2)
  
  p <- ggplot(tmp[tmp$gene==gene & tmp$start>=limits[1] & tmp$end<=limits[2],]) + geom_tile(aes(x = location, y = library, fill = coverage)) +
    scale_fill_gradient(low = 'white', high = 'red') +
    xlab('Chromosomal coordinate') +  ylab('42 libraries') +
    theme_bw() + geom_line(aes(x = value, y = library, color = tn5), data = fake) +
    guides(color = F, fill=guide_colorbar(title='Cuts per million\nmapped reads', title.position = 'top', title.hjust = 0.5)) +
    scale_y_discrete(labels = NULL) +
    scale_color_manual(values = tn5_colors) +
    scale_x_discrete(expand = c(0, 0)) + 
    theme(legend.position = 'top', legend.direction = 'horizontal') +
    xlim(c(limits[1]-200, limits[2]))
  
  gene_model_limits <- c(min(limits[1], as.data.frame(range(genesymbol[which(toupper(names(genesymbol))==toupper(gene))]))$start),
                         max(limits[2], as.data.frame(range(genesymbol[which(toupper(names(genesymbol))==toupper(gene))]))$end))
  p.txdb <- autoplot(Homo.sapiens, which = range(makeGRangesFromDataFrame(data.frame(seqnames = unique(seqnames(range(genesymbol[which(toupper(names(genesymbol))==toupper(gene))]))), start = gene_model_limits[1], end = gene_model_limits[2]))), ignore.strand = T)
  pdf(glue('tn5_{gene}.pdf'), height = 4, width = 4.5)
  print(tracks(p, p.txdb + theme_bw(), heights = c(2.5, 1), xlab='Chromosomal coordinate', xlim = c(limits[1]-200, limits[2])))
  dev.off()
}

detach("package:ggbio", unload=TRUE)



counts <- left_join(tf_overlap, sample_info)

# make a plot where the replicates are combined. Heatmap, x axis = Tn5 concentration, y axis = factor, color = proportion of reads overlapping peaks / proportion for Tn5 = 1X
tmp <- counts %>% dplyr::group_by(factor, accession, tn5) %>%
  dplyr::summarize(prop=mean(proportion_of_reads_overlapping_peak))

prop_at_1x <- tmp %>% dplyr::filter(tn5=='1X') %>% dplyr::select(-tn5) %>% dplyr::rename(base_prop=prop)
tmp <- left_join(tmp, prop_at_1x) %>% mutate(normalized_prop=prop/base_prop)
tmp$label <- paste0(tmp$factor, ' (', tmp$accession, ')')
p <- ggplot(tmp %>% dplyr::filter(tn5!='1X')) + geom_tile(aes(x = gsub('X', '', tn5), y = factor, fill = normalized_prop)) +
  scale_fill_gradient2(low = 'blue', mid = 'white', 'high' = 'red', midpoint = 1) +
  xlab('Relative [Tn5]') + ylab('') +
  guides(fill = guide_colorbar(title = 'Proportion of reads overlapping ChIP-seq peaks\n(relative to relative [Tn5] = 1)')) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5), legend.position = 'bottom') +
  coord_flip()
pdf('tn5_tf_overlap.pdf', height = 4, width = 8)
p
dev.off()

# qPCR data
day_1 <- read.table(file.path(ROOT, 'figures', 'tn5', '2017-08-10.txt'), head = T, as.is = T, sep = '\t')
day_2 <- read.table(file.path(ROOT, 'figures', 'tn5', '2017-08-14.txt'), head = T, as.is = T, sep = '\t')
day_1 <- tidyr::gather(day_1, key = 'parameters', value = 'norm_rlu', -Cycle)
day_2 <- tidyr::gather(day_2, key = 'parameters', value = 'norm_rlu', -Cycle)

day_1$parameters <- gsub('^X', '', day_1$parameters)
day_2$parameters <- gsub('^X', '', day_2$parameters)
day_1$parameters <- gsub('\\.\\.', '_', day_1$parameters)
day_2$parameters <- gsub('\\.\\.', '_', day_2$parameters)
day_1$parameters <- gsub('\\.$', '', day_1$parameters)
day_2$parameters <- gsub('\\.$', '', day_2$parameters)
day_1$parameters <- gsub('(rep)\\.(\\d)', '\\1\\2', day_1$parameters)
day_2$parameters <- gsub('(rep)\\.(\\d)', '\\1\\2', day_2$parameters)

# the cycle number is 'additional cycles', i.e. on top of the 5 initial cycles
day_1$Cycle <- day_1$Cycle + 5
day_2$Cycle <- day_2$Cycle + 5

# there were four replicates made each day, but we only used the best 3. So remove the omitted libraries
day_1 <- day_1[grep('rep3', day_1$parameters, invert = T),]
day_1$parameters <- gsub('rep4', 'rep3', day_1$parameters)
day_2 <- day_2[grep('rep1', day_2$parameters, invert = T),]
day_2$parameters <- gsub('rep4', 'rep6', day_2$parameters)
day_2$parameters <- gsub('rep3', 'rep5', day_2$parameters)
day_2$parameters <- gsub('rep2', 'rep4', day_2$parameters)

pcr <- bind_rows(day_1, day_2)
pcr$rep <- gsub('.*_rep', 'rep', pcr$parameters)
pcr$tn5 <- gsub('_rep.*', '', pcr$parameters)
pcr$tn5 <- factor(pcr$tn5, levels = c('No.cell.ctrl', '0.2X', '0.5X', '0.66X', '1X', '1.5X', '2X', '5X'), ordered = T)

p <- ggplot(pcr) + geom_line(aes(x = Cycle, y = norm_rlu, color = tn5)) +
        scale_color_manual(values=c('green', tn5_colors), labels = c('no cells (control)', '0.2', '0.5', '0.66', '1', '1.5', '2', '5')) +
        guides(color = guide_legend(title = 'Relative [Tn5]')) +
        theme_bw() + ylab('Normalized RLU') + xlab('Total PCR cycles') +
        geom_vline(xintercept = 16, color = 'red', linetype = 'dashed') +
        facet_wrap(~rep)
pdf('tn5_qpcr.pdf', height = 6, width = 8)
print(p)
dev.off()




# PCA
counts <- peak_counts.tn5 %>% tidyr::spread(key = library, value = count)
counts_only <- counts %>% dplyr::select(-chrom, -start, -end)
rownames(counts_only) <- with(counts, paste(chrom, start, end, sep = ':'))
rpkm <- apply(counts_only, 2, function(x){counts_to_rpkm(x, lengths = counts$end - counts$start)})
rpkm.prcomp <- prcomp(t(rpkm), center = T, scale. = T)
pca <- as.data.frame(rpkm.prcomp$x)

variances <- rpkm.prcomp$sdev^2 / sum(rpkm.prcomp$sdev^2)


# will color by sequencing run
sample_info.tmp <- sample_info %>% dplyr::select(-description) %>% tidyr::unite(col = info, library, tn5, experiment, replicate, sep = '::', remove = F)

# need to change the replicate information...because the replicate numbers are meaningless between experiments
sample_info.tmp$replicate <- factor(sample_info.tmp$replicate, ordered = F)
sample_info.tmp$day <- ifelse(sample_info.tmp$experiment == 'ex1', '1', '2')

pca$library <- rownames(pca)
pca <- left_join(pca, sample_info.tmp)

make_axis_label <- function(pc) {
  # pc should be an integer
  percentage <- round(variances[pc]*100, 2)
  percentage_string <- paste('(', percentage, '% of variance)', sep = '')
  return(paste('PC', pc, percentage_string))
}

p <- ggplot(pca) + geom_point(aes(x = PC1, y = PC2, color = tn5, shape = replicate, size = day)) + theme_bw() +
  xlab(make_axis_label(1)) +
  ylab(make_axis_label(2)) + theme(legend.box = 'horizontal') +
  scale_color_manual(values = tn5_colors, labels = c('0.2', '0.5', '0.66', '1', '1.5', '2', '5')) +
  scale_size_manual(values = c('1' = 1, '2' = 5)) +
  guides(color = guide_legend(title = 'Relative [Tn5]'), size = guide_legend(title = 'Day'), shape = guide_legend(title = 'Replicate'))

pdf('tn5_pca.pdf', width = 6, height = 3)
print(p)
dev.off()




# NB modeling
# exclude peaks for which the model didn't converge for all covariates
number_covariate_combos <- length(unique(modeling$covariates))
x <- table(modeling$peak)
results <- modeling[modeling$peak %in% names(x)[x==number_covariate_combos],]
stopifnot(length(unique(table(results$peak))) == 1) # sanity check

# now adjust the p-values...
results$q <- 1
for(i in unique(results$covariates)) {
  results$q[results$covariates==i] <- p.adjust(results$p[results$covariates==i], method='BH')
}

# show the shifts in the Z-score distributions
results <- results[results$covariates!='replicate,PC1',]
results$Covariates <- gsub(',', ' + ', results$covariates)
results$Covariates <- gsub('_', ' ', results$Covariates)

number_significant <- results %>% dplyr::group_by(Covariates) %>%
  dplyr::summarize(number_total=n(),
                   number_significant=sum(q<=0.05)) %>%
  dplyr::mutate(percent_significant=round(100 * number_significant / number_total, 1))

modeling_results_converged_in_all <- results

number_converged_in_all <- length(unique(results$peak))
print(glue('The PCR-constant experiment had {number_converged_in_all} peaks for which all models converged'))
print(number_significant)
number_positive_relationship <- results %>% dplyr::group_by(Covariates) %>%
  dplyr::filter(q<=0.05) %>%
  dplyr::filter(coefficient > 0) %>%
  dplyr::summarize(count=n())
number_positive_relationship <- number_positive_relationship$count[number_positive_relationship$Covariates=='replicate']
print(glue('{number_positive_relationship} of the significant peaks were Tn5 up'))

example_peaks <- results[results$peak %in% c(EXAMPLE_ENHANCER_PEAK, EXAMPLE_PROMOTER_PEAK),]
example_peaks$label <- ifelse(example_peaks$peak==EXAMPLE_PROMOTER_PEAK, 'promoter peak from Fig 2', 'enhancer peak from Fig 2')
example_peak_colors <- c('promoter peak from Fig 2' = 'red', 'enhancer peak from Fig 2' = 'blue')

p <- ggplot(results) +
  geom_density(aes(x = coefficient / coefficient_se, fill = Covariates), alpha = 0.3) +
  geom_text(aes(x = 15, y = 0.1, label = glue('{percent_significant}% of peaks\nTn5 sensitive')), data = number_significant, size = 4) +
  theme_bw() +
  geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
  geom_vline(aes(xintercept = coefficient / coefficient_se, color = label), linetype = 'dashed', data = example_peaks) +
  scale_color_manual(values = example_peak_colors, guide=guide_legend(title='')) +
  xlab('Z-statistic for Tn5 coefficient') +
  facet_wrap(~Covariates, ncol = 1)
pdf('tn5_modeling.pdf', width = 7, height = 5)
print(p)
dev.off()



# Tn5 sensitivity by Chipseq-overlap
tn5_sensitivity <- modeling %>% dplyr::filter(covariates=='replicate') %>% dplyr::select(coefficient, coefficient_se, p, peak)
tn5_sensitivity$p[is.na(tn5_sensitivity$p)] <- 1
tn5_sensitivity$q <- p.adjust(tn5_sensitivity$p, method = 'BH')
tmp <- tf_peak_overlap %>%
  left_join(tn5_sensitivity)
p <- ggplot(tmp) + geom_density(aes(x = coefficient/coefficient_se, fill = overlaps), alpha = 0.3) +
  theme_bw() +
  facet_wrap(~experiment, ncol = 8) +
  xlab('Z-statistic from NB-GLM') +
  guides(fill=guide_legend(title = "ATAC-seq peak\noverlaps\nChIP-seq peak"))
pdf('tn5_sensitivity_by_chipseq_overlap.pdf', width = 16, height = 20)
p
dev.off()



# splitting into CTCF-RAD21-SMC3 combos
experiments <- c('RAD21.ENCFF756HRE', 'SMC3.ENCFF496PLN', 'CTCF.ENCFF096AKZ')
tmp <- tf_peak_overlap %>%
  left_join(tn5_sensitivity) %>%
  dplyr::filter(experiment %in% experiments) %>%
  dplyr::mutate(protein=gsub('\\..*', '', experiment)) %>%
  dplyr::select(-experiment) %>%
  tidyr::spread(key = protein, value = overlaps)
proteins <- colnames(tmp)[(ncol(tmp)-2):ncol(tmp)]
tmp$label <- apply(tmp[,c('CTCF', 'RAD21', 'SMC3')], 1, function(x){
  x <- paste(c('CTCF', 'RAD21', 'SMC3')[x], collapse = ' + ')
  if (x=='') {
    return('None')
  } else {
    return(x)
  }
})

p <- ggplot(tmp) + geom_density(aes(x = coefficient/coefficient_se, fill = label), alpha = 0.3) +
  theme_bw() +
  facet_wrap(~label, ncol = 1) +
  xlab('Z-statistic from NB-GLM') +
  guides(fill=guide_legend(title = 'ATAC-seq peak overlaps ChIP-seq peak'))
pdf('tn5_sensitivity_by_chipseq_overlap_ctcf_subsetting.pdf', width = 8, height = 11)
p
dev.off()

# what if plot the probability that a peak is Tn5 sensitive by peak signal and tf binding?
# bin peaks by signal...
# note -- not taking into account differences in library size here...
peak_signal <- peak_counts %>%
  left_join(sample_info) %>%
  dplyr::filter(tn5=='1X') %>%
    dplyr::group_by(library) %>%
    dplyr::mutate(median_count_in_library=median(count)) %>%
    dplyr::ungroup() %>%
    dplyr::mutate(signal=count/median_count_in_library,
                  peak=glue('{chrom}:{start}:{end}')) %>%
  dplyr::group_by(peak) %>%
  dplyr::summarize(median_signal=median(signal))
  

peak_signal_bins <- peak_signal
peak_signal_bins$bin <- cut_number(peak_signal_bins$median_signal, n = 10)

tmp <- tf_peak_overlap %>%
  left_join(tn5_sensitivity) %>%
  left_join(peak_signal_bins) %>%
  dplyr::mutate(experiment=gsub('.ENCFF.*', '', experiment)) %>%
  dplyr::filter(!is.na(p)) # if didn't converge, exclude the peak....
tmp2 <- tmp %>%
  dplyr::group_by(experiment, bin, overlaps) %>%
  dplyr::summarize(prob_significant=sum(q<=0.05)/n())
tmp2$bin <- as.numeric(tmp2$bin)
tmp2$overlaps <- ifelse(tmp2$overlaps, 'yes', 'no')
p <- ggplot(tmp2) + geom_line(aes(x = bin, y = prob_significant, color = overlaps)) +
  facet_wrap(~experiment) + theme_bw() + xlab('ATAC-seq peak read count decile') +
  scale_x_continuous(breaks=1:10) + ylab('Probability peak is Tn5 sensitive') +
  guides(color = guide_legend(title='ATAC-seq peak\noverlaps\nTF ChIP-seq peak'))
pdf('tn5_sensitivity_prob_by_chipseq_overlap_and_peak_signal.pdf', width = 11, height = 11)
p
dev.off()


# model prob_nominally_sign ~ peak_size + overlaps_chipseq_peak
model_results <- function(glm, check_converged = T) {
  # extracts the variable names, coefficients, and p-values for the variables.
  
  results <- data.frame(
    variable = names(coef(glm)),
    coefficient = coef(glm),
    coefficient_se = coef(summary(glm))[,2],
    p = coef(summary(glm))[,4]
  )
  
  if (check_converged & !glm$converged) {
    results$coefficient <- NA
    results$coefficient_se <- NA
    results$p <- NA
  }
  
  return(results)
}


logistic_regression <- bind_rows(lapply(unique(tf_peak_overlap$experiment), function(experiment){
  print(glue('Modeling {experiment}'))
  tmp <- tf_peak_overlap[tf_peak_overlap$experiment == experiment,] %>%
  left_join(tn5_sensitivity) %>%
  left_join(peak_signal) %>%
  dplyr::filter(!is.na(p)) %>%
  dplyr::mutate(experiment=gsub('.ENCFF.*', '', experiment),
                significant=ifelse(q<=0.05, 1, 0),
                overlaps_peak=ifelse(overlaps, 1, 0))
  
  mod <- glm(significant ~ median_signal + overlaps_peak, data = tmp, family=binomial(link="logit"))
  df <- model_results(mod)
  df$experiment <- experiment
  return(df)
}))


binding_predicts_sensitivity <- logistic_regression %>%
  dplyr::filter(variable=='overlaps_peak') %>%
  dplyr::select(-variable)
binding_predicts_sensitivity$significant <- binding_predicts_sensitivity$p <= (0.05 / nrow(binding_predicts_sensitivity))
binding_predicts_sensitivity$direction <- sign(binding_predicts_sensitivity$coefficient)
binding_predicts_sensitivity[,c('experiment', 'significant', 'direction')]
binding_predicts_sensitivity[!binding_predicts_sensitivity$significant | binding_predicts_sensitivity$direction<0,c('experiment', 'significant', 'direction')]
binding_predicts_sensitivity[!binding_predicts_sensitivity$significant | binding_predicts_sensitivity$direction<0,c('experiment', 'significant', 'direction', 'p')]

@



<<include=F,echo=F>>=
sample_info <- sample_info.cd
fragment_lengths <- fragment_lengths.cd
tss_coverages <- tss_coverage.cd
metrics <- metrics.cd
chromhmm_overlap <- chromhmm_overlap.cd
peak_chromhmm_overlap <- peak_chromhmm_overlap.cd
peak_chromhmm_overlap_subsample <- peak_chromhmm_overlap_subsample.cd %>%
  dplyr::filter(!library %in% c('81984___1833', '81991___1833', '81998___1833')) # less than 10M reads...
#tf_overlap <- tf_overlap.cd
modeling <- modeling.cd

metrics.high <- metrics %>%
  tidyr::separate(col = library, into = c('library', 'run')) %>%
  dplyr::filter(run==1833) %>%
  dplyr::select(-run)

metrics.high_vs_low <- metrics %>%
  tidyr::separate(col = library, into = c('library', 'run')) %>%
  dplyr::mutate(run=ifelse(run==1830, 'low', 'high')) %>% 
  tidyr::spread(key = run, value = value)

metrics.high_vs_low %>%
  dplyr::mutate(difference=high-low) %>%
  dplyr::group_by(metric) %>%
  dplyr::summarize(avg_diff=mean(difference))


# set the color scheme
colors <- tn5_colors
names(colors) <- c('0.2X', '0.5X', '0.66X', '1X', '1.5X', '2X', '5X')

for(each_metric in unique(metrics.high_vs_low$metric)) {
  tmp <- metrics.high_vs_low %>% dplyr::filter(metric==each_metric) %>%
    left_join(sample_info %>% dplyr::select(library, replicate, tn5) %>% dplyr::mutate(library=gsub('___.*', '', library)) %>% unique())

  xlabel <- paste(metric_names[each_metric], '\n(low cluster density)')
  ylabel <- paste(metric_names[each_metric], '\n(high cluster density)')
  lim.max <- max(c(tmp[,'low'], tmp[,'high']))
  lim.min <- min(c(tmp[,'low'], tmp[,'high']))
  p <- ggplot(tmp) + geom_point(aes(x = low, y = high, color = tn5, shape = replicate)) +
    theme_bw() +
    xlab(xlabel) +
    ylab(ylabel) +
    coord_cartesian(xlim=c(lim.min, lim.max),
                    ylim=c(lim.min, lim.max)) +
    geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
    scale_color_manual(values = colors)

  OUT <- glue('cd_high_vs_low_{each_metric}.pdf')
  pdf(OUT, height = 4, width = 5)
  print(p)
  dev.off()
}


hqaa_overlapping_peaks_percent <- left_join(metrics.high, sample_info %>% dplyr::select(library, tn5, replicate) %>% dplyr::mutate(library=gsub('___.*', '', library))) %>%
  dplyr::filter(metric=='hqaa_overlapping_peaks_percent')
hqaa_overlapping_peaks_percent$tn5 <- log2(as.numeric.tn5(hqaa_overlapping_peaks_percent$tn5))
hqaa_overlapping_peaks_percent$replicate <- gsub('rep', '', hqaa_overlapping_peaks_percent$replicate)

p <- ggplot(hqaa_overlapping_peaks_percent) +
  geom_point(aes(x = tn5, y = value, color = replicate)) +
  geom_line(aes(x = tn5, y = value, color = replicate)) +
  scale_color_manual(values=tn5_replicate_colors) +
  xlab("log2(Relative [Tn5])") +
  ylab('% reads\noverlapping peaks') +
  theme_bw() +
  theme(axis.text=element_text(size=13))+
  theme(axis.title=element_text(size=15)) +
  guides(color = guide_legend(nrow = 3, title = element_text('Replicate')))

pdf('cd_hqaa_overlapping_peaks_percent.pdf', height = 3, width = 4)
print(p)
dev.off()


mitochondrial_percent <- left_join(metrics.high, sample_info %>% dplyr::select(library, tn5, replicate) %>% dplyr::mutate(library=gsub('___.*', '', library))) %>%
  dplyr::filter(metric=='percent_mitochondrial')
mitochondrial_percent$tn5 <- log2(as.numeric.tn5(mitochondrial_percent$tn5))
mitochondrial_percent$replicate <- gsub('rep', '', mitochondrial_percent$replicate)

p <- ggplot(mitochondrial_percent) +
  geom_point(aes(x = tn5, y = value, color = replicate)) +
  geom_line(aes(x = tn5, y = value, color = replicate)) +
  scale_color_manual(values=tn5_replicate_colors) +
  xlab("log2(Relative [Tn5])") +
  ylab('% mitochondrial reads') +
  theme_bw() +
  theme(axis.text=element_text(size=13))+
  theme(axis.title=element_text(size=15)) +
  guides(color = guide_legend(nrow = 3, title = element_text('Replicate')))

pdf('cd_mitochondrial_percent.pdf', height = 3, width = 4)
print(p)
dev.off()



median_fragment_length <- left_join(metrics.high, sample_info %>% dplyr::select(library, tn5, replicate) %>% dplyr::mutate(library=gsub('___.*', '', library))) %>%
  dplyr::filter(metric=='median_fragment_length')
median_fragment_length$tn5 <- log2(as.numeric.tn5(median_fragment_length$tn5))
median_fragment_length$replicate <- gsub('rep', '', median_fragment_length$replicate)

p <- ggplot(median_fragment_length) +
  geom_point(aes(x = tn5, y = value, color = replicate)) +
  geom_line(aes(x = tn5, y = value, color = replicate)) +
  scale_color_manual(values=tn5_replicate_colors) +
  xlab("log2(Relative [Tn5])") +
  ylab('Median fragment length (bp)') +
  theme_bw() +
  theme(axis.text=element_text(size=13))+
  theme(axis.title=element_text(size=13)) +
  guides(color = guide_legend(nrow = 3, title = element_text('Replicate')))

pdf('cd_median_fragment_length.pdf', height = 3, width = 4)
print(p)
dev.off()



tmp <- left_join(metrics.high, sample_info %>% dplyr::select(library, tn5, replicate) %>% dplyr::mutate(library=gsub('___.*', '', library))) %>%
  dplyr::filter(metric=='tss_enrichment')
tmp$tn5 <- log2(as.numeric.tn5(tmp$tn5))
tmp$replicate <- gsub('rep', '', tmp$replicate)

p <- ggplot(tmp) +
  geom_point(aes(x = tn5, y = value, color = replicate)) +
  geom_line(aes(x = tn5, y = value, color = replicate)) +
  scale_color_manual(values=tn5_replicate_colors) +
  xlab("log2(Relative [Tn5])") +
  ylab('TSS enrichment') +
  theme_bw() +
  theme(axis.text=element_text(size=13))+
  theme(axis.title=element_text(size=15)) +
  guides(color = guide_legend(nrow = 3, title = element_text('Replicate')))

pdf('cd_tss_enrichment.pdf', height = 3, width = 4)
print(p)
dev.off()


# proportion of reads that are usable, post-filtering
proportion_usable <- metrics.high %>% dplyr::filter(metric %in% c('total_reads', 'hqaa')) %>%
  tidyr::spread(key = metric, value = value) %>%
  dplyr::mutate(proportion_usable = hqaa/total_reads) %>%
  left_join(sample_info %>% dplyr::mutate(library=gsub('___.*', '', library)) %>% dplyr::filter(sequencing_run==1833) %>% unique())
# p <- ggplot(proportion_usable) + geom_line(aes(x = as.numeric.tn5(tn5), y = total_reads, color = gsub('rep', '', replicate))) +
#   scale_color_manual(values=tn5_replicate_colors) + theme_bw()
# p
p <- ggplot(proportion_usable) + geom_line(aes(x = log2(as.numeric.tn5(tn5)), y = proportion_usable, color = gsub('rep', '', replicate))) +
  geom_point(aes(x = log2(as.numeric.tn5(tn5)), y = proportion_usable, color = gsub('rep', '', replicate))) +
 scale_color_manual(values=tn5_replicate_colors) + theme_bw() +
  xlab('log2(Relative [Tn5])') + ylab('Proportion of reads remaining\nafter deduplication and filtering') + guides(color=guide_legend(title='Replicate'))
pdf('cd_proportion_hqaa.pdf', height = 3, width = 4)
print(p)
dev.off()


# proportion of reads that are duplicates
proportion_duplicates <- metrics.high %>% dplyr::filter(metric %in% c('total_reads', 'duplicate_reads')) %>%
  tidyr::spread(key = metric, value = value) %>%
  dplyr::mutate(proportion_duplicates = duplicate_reads/total_reads) %>%
  left_join(sample_info %>% dplyr::mutate(library=gsub('___.*', '', library)) %>% dplyr::filter(sequencing_run==1833) %>% unique())
p <- ggplot(proportion_duplicates) + geom_line(aes(x = log2(as.numeric.tn5(tn5)), y = proportion_duplicates, color = gsub('rep', '', replicate))) +
  geom_point(aes(x = log2(as.numeric.tn5(tn5)), y = proportion_duplicates, color = gsub('rep', '', replicate))) +
  scale_color_manual(values=tn5_replicate_colors) + theme_bw() +
  xlab('log2(Relative [Tn5])') + ylab('Proportion of reads\nthat are duplicates') + guides(color=guide_legend(title='Replicate'))
pdf('cd_proportion_duplicate.pdf', height = 3, width = 4)
print(p)
dev.off()


counts <- left_join(chromhmm_overlap %>% dplyr::filter(grepl('1833', library)), sample_info)
counts$tn5 <- log2(as.numeric(gsub('X', '', counts$tn5)))
reads_per_lib <- counts %>% dplyr::group_by(library) %>% dplyr::summarize(total_reads=sum(read_count))
counts <- left_join(counts, reads_per_lib)
counts$proportion_of_reads <- counts$read_count / counts$total_reads
merge_reps <- counts %>% dplyr::select(chromatin_state, proportion_of_reads, tn5) %>% dplyr::group_by(tn5, chromatin_state) %>% dplyr::summarize(mean_proportion=mean(proportion_of_reads), median_proportion=median(proportion_of_reads))
# change the order of the chromatin states so that the order in the legend matches the order of the lines on the plot
tmp <- merge_reps[merge_reps$tn5==max(merge_reps$tn5),]
tmp <- tmp[order(tmp$median_proportion),]
chromatin_state_order <- rev(tmp$chromatin_state)
merge_reps$chromatin_state <- factor(merge_reps$chromatin_state, levels = chromatin_state_order, ordered = T)

p <- ggplot(merge_reps) + geom_line(aes(x = tn5, y = median_proportion, color = chromatin_state)) +
  geom_point(aes(x = tn5, y = median_proportion, color = chromatin_state)) +
  scale_color_manual(values=chromhmm_colors, labels = chromhmm_color_labels) +
  theme_bw() + xlab('log2(Relative [Tn5])') + ylab('Median proportion of reads from\nlibrary overlapping chromatin state') +
  guides(color=guide_legend(title = 'Chromatin state'))
pdf('cd_chromatin_state_overlap.pdf', width = 4, height = 3)
print(p)
dev.off()



# plot number of pcr cycles
tmp <- sample_info %>% dplyr::select(tn5, replicate, pcr_cycles) %>% unique()
tmp$tn5 <- log2(as.numeric.tn5(tmp$tn5))
p <- ggplot(tmp) + 
  geom_line(aes(x = tn5, y = pcr_cycles, color = gsub('rep', '', replicate))) +
  geom_point(aes(x = tn5, y = pcr_cycles, color = gsub('rep', '', replicate))) +
  scale_color_manual(values=tn5_replicate_colors) +
  theme_bw() + xlab('log2(Relative [ Tn5 ])') + ylab('Number of PCR cycles for library') +
  guides(color=guide_legend(title='Replicate'))
pdf('cd_pcr_cycles.pdf', width = 6, height = 5)
print(p)
dev.off()


# NB modeling
# exclude peaks for which the model didn't converge for all covariates
number_covariate_combos <- length(unique(modeling$covariates))
x <- table(modeling$peak)
results <- modeling[modeling$peak %in% names(x)[x==number_covariate_combos],]
stopifnot(length(unique(table(results$peak))) == 1) # sanity check

# now adjust the p-values...
results$q <- 1
for(i in unique(results$covariates)) {
  results$q[results$covariates==i] <- p.adjust(results$p[results$covariates==i], method='BH')
}

# show the shifts in the Z-score distributions
results <- results[results$covariates!='replicate,PC1',]
results$Covariates <- gsub(',', ' + ', results$covariates)
results$Covariates <- gsub('_', ' ', results$Covariates)

number_significant <- results %>% dplyr::group_by(Covariates) %>%
  dplyr::summarize(number_total=n(),
                   number_significant=sum(q<=0.05)) %>%
  dplyr::mutate(percent_significant=round(100 * number_significant / number_total, 1))

number_converged_in_all <- length(unique(results$peak))
print(glue('The PCR-variable experiment had {number_converged_in_all} peaks for which all models converged'))
print(number_significant)


p <- ggplot(results) +
  geom_density(aes(x = coefficient / coefficient_se, fill = Covariates), alpha = 0.3) +
  geom_text(aes(x = 15, y = 0.1, label = glue('{percent_significant}% of peaks\nTn5 sensitive')), data = number_significant, size = 4) +
  theme_bw() +
  geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
  xlab('Z-statistic for Tn5 coefficient') +
  facet_wrap(~Covariates, ncol = 1)
pdf('cd_modeling.pdf', width = 7, height = 5)
print(p)
dev.off()
# number of Tn5 sensitive peaks
# table(results$q<=0.05)
# nrow(results)





# exclude peaks for which the model didn't converge for all covariates
number_covariate_combos <- length(unique(modeling$covariates))
x <- table(modeling$peak)
results <- modeling[modeling$peak %in% names(x)[x==number_covariate_combos],]
stopifnot(length(unique(table(results$peak))) == 1) # sanity check

# now adjust the p-values...
results$q <- 1
for(i in unique(results$covariates)) {
  results$q[results$covariates==i] <- p.adjust(results$p[results$covariates==i], method='BH')
}

# show the shifts in the Z-score distributions
results <- results[results$covariates!='replicate,PC1',]
results$Covariates <- gsub(',', ' + ', results$covariates)
results$Covariates <- gsub('_', ' ', results$Covariates)

number_significant <- results %>% dplyr::group_by(Covariates) %>%
  dplyr::summarize(number_total=n(),
                   number_significant=sum(q<=0.05)) %>%
  dplyr::mutate(percent_significant=round(100 * number_significant / number_total, 1))

number_converged_in_all <- length(unique(results$peak))

p <- ggplot(results) +
  geom_density(aes(x = coefficient / coefficient_se, fill = Covariates), alpha = 0.3) +
  geom_text(aes(x = 15, y = 0.05, label = glue('{percent_significant}% of peaks\nTn5 sensitive')), data = number_significant, size = 4) +
  theme_bw() +
  geom_vline(xintercept = 0, col = 'red', linetype = 'dashed') +
  xlab('Z-statistic for Tn5 coefficient') +
  facet_wrap(~Covariates, ncol = 1)
pdf('cd_modeling.pdf', width = 7, height = 5)
print(p)
dev.off()



# quantifications in the paper
# "The average difference in median fragment length between sequencing runs was XXX bps"
tmp <- metrics.high_vs_low %>% dplyr::filter(metric=='median_fragment_length') %>% dplyr::mutate(diff=low-high)
mean(tmp$diff)


# TSS enrichment was consistently higher in the high cluster density sequencing run (average difference of XXX
tmp <- metrics.high_vs_low %>% dplyr::filter(metric=='tss_enrichment') %>% dplyr::mutate(diff=high-low)
mean(tmp$diff)

@


<<include=F,echo=F>>=
# Compare TSS enrichment using different methods
# calculate the baseline for each method
tss_method_comparison <- tss_coverage.ataqv.tn5 %>%
  dplyr::mutate(method='Coverage using fragment')
tss_method_comparison <- bind_rows(tss_method_comparison,
                                   tss_coverage.cutsite.tn5 %>%
                                     dplyr::mutate(method='Coverage using cutsite +/- 1 bp'))
tss_method_comparison <- bind_rows(tss_method_comparison,
                                   tss_coverage.ENCODE.tn5 %>%
                                     dplyr::mutate(method='Coverage using cutsite +/- 1/2 read length'))

# First, just make a coverage plot for one library
SHOW_LIBRARY <- sample_info.tn5$library[sample_info.tn5$tn5=='1X' & sample_info.tn5$replicate=='rep6']
p <- tss_method_comparison %>%
  dplyr::filter(library==SHOW_LIBRARY) %>%
  ggplot() +
  geom_line(aes(x = position, y = coverage, color = method)) +
  scale_color_viridis_d() +
  theme_bw() +
  xlab('Position relative to TSS (bp)') +
  ylab('Normalized coverage') +
  guides(color = guide_legend(title=''))
pdf('tss_coverage_different_methods.pdf', width = 8, height = 3.5)
print(p)
dev.off()

# show the positional stability under each method
p <- tss_method_comparison %>%
  dplyr::group_by(library, method) %>%
  dplyr::mutate(max_coverage=max(coverage)) %>%
  dplyr::ungroup() %>%
  dplyr::filter(coverage==max_coverage) %>%
  left_join(sample_info.tn5) %>%
  dplyr::mutate(label=glue('{tn5} Tn5, {replicate}')) %>%
  ggplot() +
  geom_point(aes(x = position, y=label, color = method)) +
  theme_bw() +
  scale_color_viridis_d() +
  xlab('Position of max coverage relative to TSS') +
  ylab('Library') +
  guides(color=F)
pdf('tss_coverage_positional_stability.pdf', width = 5, height = 8)
print(p)
dev.off()
@



<<include=F,echo=F>>=
# Compare TSS enrichment using different TSS annotations
TSS_ENRICHMENT_COMPARISON <- read.table(file.path(ROOT, 'figures/tn5/tss-list-comparison.tss_enrichment.txt'), head = F, as.is = T, sep = '\t', col.names = c('file', 'metric', 'value')) %>%
  dplyr::mutate(library=gsub('(\\d+)-(.*).json.gz', '\\1', basename(file)),
                tss_list=gsub('(\\d+)-(.*).json.gz', '\\2', basename(file))) %>%
  dplyr::select(-file, -metric) %>%
  dplyr::rename(tss_enrichment=value)

limmin <- min(TSS_ENRICHMENT_COMPARISON$tss_enrichment)
limmax <- max(TSS_ENRICHMENT_COMPARISON$tss_enrichment)

p <- TSS_ENRICHMENT_COMPARISON %>%
  tidyr::spread(key = tss_list, value = tss_enrichment) %>%
  left_join(sample_info.tn5) %>%
  ggplot() + 
  geom_point(aes(x = all, y = housekeeping, color = tn5)) +
  theme_bw() +
  xlab('TSS enrichment using\nall RefSeq TSS') +
  ylab('TSS enrichment using RefSeq\nTSS of housekeeping genes') +
  scale_color_manual(values = tn5_colors, breaks = c('0.2X', '0.5X', '0.66X', '1X', '1.5X', '2X', '5X'), labels = c('0.2', '0.5', '0.66', '1', '1.5', '2', '5')) +
  guides(color = guide_legend(title = 'Relative [Tn5]')) +
  xlim(c(limmin, limmax)) +
  ylim(c(limmin, limmax)) +
  geom_abline(slope = 1, intercept = 0, color = 'black', linetype = 'dashed')
pdf('tss_enrichment_housekeeping_vs_all.pdf', width = 6, height = 5)
print(p)
dev.off()
@


<<include=F,echo=F>>=
# example FLD calculation
undertransposed <- 'SRX298004'
overtransposed <- 'SRX298009'
reference <- 'SRX298000'

undertransposed <- fragment_lengths.public %>% dplyr::filter(experiment==undertransposed) %>% dplyr::select(fragment_length, count, fraction)
undertransposed$cumulative <- cumsum(undertransposed$fraction)
undertransposed$sample <- 'undertransposed'

overtransposed <- fragment_lengths.public %>% dplyr::filter(experiment==overtransposed) %>% dplyr::select(fragment_length, count, fraction)
overtransposed$cumulative <- cumsum(overtransposed$fraction)
overtransposed$sample <- 'overtransposed'

reference <- fragment_lengths.public %>% dplyr::filter(experiment==reference) %>% dplyr::select(fragment_length, count, fraction)
reference$cumulative <- cumsum(reference$fraction)
reference$sample <- 'reference'

all <- rbind(overtransposed, undertransposed, reference)
all <- tidyr::gather(all, key = stat, value = value, fraction:cumulative)

# Create the vertical dashed lines representing the statistic
diff.o <- abs(reference$cumulative - overtransposed$cumulative)
point_of_greater_difference <- reference$fragment_length[diff.o==max(diff.o)]
ymax <- overtransposed$cumulative[overtransposed$fragment_length==point_of_greater_difference]
ymin <- reference$cumulative[reference$fragment_length==point_of_greater_difference]
line_between_reference_and_overtransposed <- data.frame(x = point_of_greater_difference, ymax = ymax, ymin = ymin, stat = 'cumulative')

diff.o <- abs(reference$cumulative - undertransposed$cumulative)
point_of_greater_difference <- reference$fragment_length[diff.o==max(diff.o)]
ymax <- undertransposed$cumulative[undertransposed$fragment_length==point_of_greater_difference]
ymin <- reference$cumulative[reference$fragment_length==point_of_greater_difference]
line_between_reference_and_undertransposed <- data.frame(x = point_of_greater_difference, ymax = ymax, ymin = ymin, stat = 'cumulative')

colors <- c('#66c2a5','#fc8d62','#8da0cb')
names(colors) <- rev(c('overtransposed', 'reference', 'undertransposed'))

# now piece together the final plot
cumulative <- ggplot(all[all$stat=="cumulative",]) + geom_step(aes(x = fragment_length, y = value, color = sample)) + theme_bw() + xlab("Fragment length (bp)") +
  coord_cartesian(xlim=c(0, 500)) +
  ylab("F(fragment length)") +
  guides(color = guide_legend(title = '')) +
  scale_color_manual(values = colors) +
  theme(legend.position = c(0.75, 0.35), legend.background = element_blank(), plot.title = element_text(hjust = 0.5)) +
  geom_linerange(aes(x = x, ymax = ymax, ymin = ymin), data = line_between_reference_and_overtransposed, linetype = 'dashed') +
  geom_linerange(aes(x = x, ymax = ymax, ymin = ymin), data = line_between_reference_and_undertransposed, linetype = 'dashed') +
  geom_text(aes(x = x+50, y = mean(c(ymax,ymin)), label = round(ymax-ymin, 2)), data = line_between_reference_and_overtransposed) +
  geom_text(aes(x = x+50, y = mean(c(ymax,ymin)), label = round(ymax-ymin, 2)), data = line_between_reference_and_undertransposed)

den <- ggplot(all[all$stat=="fraction",]) + geom_line(aes(x = fragment_length, y = value, color = sample)) + theme_bw() + xlab("Fragment length (bp)") +
  coord_cartesian(xlim=c(0, 500)) +
  guides(color = guide_legend(title = '')) + scale_color_manual(values = colors) +
  ylab("Fraction of reads") + theme(plot.title = element_text(hjust = 0.5), legend.position = c(0.6, 0.6), legend.background = element_blank())

pdf('example_fld_calculation_cumulative.pdf', width = 4, height = 3)
print(cumulative)
dev.off()

pdf('example_fld_calculation_density.pdf', width = 4, height = 3)
print(den)
dev.off()
@

\renewcommand{\thefigure}{\textbf{\arabic{figure}. }}
\setcounter{figure}{0}

\begin{figure}
  \includegraphics[width=\textwidth,trim=0em 12em 0em 0em,clip=true]{make_public_fig}
  \caption{}
\end{figure}


\begin{figure}
  \includegraphics[width=\textwidth]{make_tn5_fig}
  \caption{}
\end{figure}


%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Supplemental figures
%%%%%%%%%%%%%%%%%%%%%%%%
\renewcommand{\thefigure}{\textbf{S\arabic{figure}. }}
\setcounter{figure}{0}

\begin{figure}
  \subfloat[]{\includegraphics[width=0.9\textwidth,trim=0em 25em 0em 25em,clip=true]{ataqv-workflow}}\\
  \subfloat[]{\includegraphics[width=\textwidth]{ataqv_screenshot}}
  \caption{}
\end{figure}

\begin{figure}
  \subfloat[]{\includegraphics[width=0.5\textwidth]{example_fld_calculation_density}\label{fig:example_fld_calculation_density}}
  \subfloat[]{\includegraphics[width=0.5\textwidth]{example_fld_calculation_cumulative}\label{fig:example_fld_calculation_cumulative}}
  \caption{}
\end{figure}


\begin{figure}
  \subfloat[]{\includegraphics[width=0.5\textwidth]{public_intrastudy_heterogeneity_fragment_length_distributions}}
  \subfloat[]{\includegraphics[width=0.5\textwidth]{public_intrastudy_heterogeneity_tss_enrichment}}\\
  \caption{}
\end{figure}

\begin{figure}
  \subfloat[]{\includegraphics[width=0.25\textwidth]{cd_cartoon}\label{fig:cd_cartoon}}
  \subfloat[]{\includegraphics[width=0.35\textwidth]{cd_high_vs_low_median_fragment_length}\label{fig:cd_high_vs_low_median_fragment_length}}
  \subfloat[]{\includegraphics[width=0.35\textwidth]{cd_high_vs_low_tss_enrichment}\label{fig:cd_high_vs_low_tss_enrichment}}
  \caption{}
\end{figure}

\begin{figure}
  \includegraphics[width=\textwidth]{cd_pcr_cycles}
  \caption{}
\end{figure}

\begin{figure}
  \includegraphics[width=\textwidth]{tn5_qpcr}\label{fig:tn5_qpcr}
  \caption{}
\end{figure}

\begin{figure}
  \subfloat[]{\includegraphics[width=0.4\textwidth]{tn5_median_fragment_length_all_six}}
  \subfloat[]{\includegraphics[width=0.4\textwidth]{tn5_mitochondrial_percent}}\\
  \subfloat[]{\includegraphics[width=0.4\textwidth]{tn5_tss_enrichment_all_six}}
  \subfloat[]{\includegraphics[width=0.4\textwidth]{tn5_proportion_duplicate}}\\
  \subfloat[]{\includegraphics[width=0.4\textwidth]{tn5_proportion_hqaa}}
  \caption{}
\end{figure}


\begin{figure}
  \subfloat[]{\includegraphics[width=0.4\textwidth]{cd_median_fragment_length}}
  \subfloat[]{\includegraphics[width=0.4\textwidth]{cd_mitochondrial_percent}}\\
  \subfloat[]{\includegraphics[width=0.4\textwidth]{cd_tss_enrichment}}
  \subfloat[]{\includegraphics[width=0.4\textwidth]{cd_hqaa_overlapping_peaks_percent}}\\
  \subfloat[]{\includegraphics[width=0.4\textwidth]{cd_proportion_duplicate}}
  \subfloat[]{\includegraphics[width=0.4\textwidth]{cd_proportion_hqaa}}
  \caption{}
\end{figure}


\begin{figure}
  \includegraphics[width=\textwidth]{tn5_pca}
  \caption{}
\end{figure}


\begin{figure}
  \includegraphics[width=\textwidth]{tn5_modeling}
  \caption{}
\end{figure}

\begin{figure}
        \includegraphics[height=5cm]{chromatin_state_legend}\\
        \vspace{1cm}
        \subfloat[]{\includegraphics[height=5cm]{promoter_rep1}}\hspace{0.25cm}
        \subfloat[]{\includegraphics[height=5cm,trim=25em 0em 0em 0em,clip=true]{promoter_rep2}}\hspace{0.25cm}
        \subfloat[]{\includegraphics[height=5cm,trim=25em 0em 0em 0em,clip=true]{promoter_rep3}}\\
        \subfloat[]{\includegraphics[height=5cm]{promoter_rep4}}\hspace{0.25cm}
        \subfloat[]{\includegraphics[height=5cm,trim=25em 0em 0em 0em,clip=true]{promoter_rep5}}\hspace{0.25cm}
        \subfloat[]{\includegraphics[height=5cm,trim=25em 0em 0em 0em,clip=true]{promoter_rep6}}
        \caption{}
\end{figure}

\begin{figure}
        \includegraphics[height=5cm]{chromatin_state_legend}\\
        \vspace{1cm}
        \subfloat[]{\includegraphics[height=5cm]{enhancer_rep1}}\hspace{0.25cm}
        \subfloat[]{\includegraphics[height=5cm,trim=25em 0em 0em 0em,clip=true]{enhancer_rep2}}\hspace{0.25cm}
        \subfloat[]{\includegraphics[height=5cm,trim=25em 0em 0em 0em,clip=true]{enhancer_rep3}}\\
        \subfloat[]{\includegraphics[height=5cm]{enhancer_rep4}}\hspace{0.25cm}
        \subfloat[]{\includegraphics[height=5cm,trim=25em 0em 0em 0em,clip=true]{enhancer_rep5}}\hspace{0.25cm}
        \subfloat[]{\includegraphics[height=5cm,trim=25em 0em 0em 0em,clip=true]{enhancer_rep6}}
        \caption{}
\end{figure}

\begin{figure}
  \includegraphics[width=\textwidth]{cd_modeling}
  \caption{}
\end{figure}

\begin{figure}
  \includegraphics[width=\textwidth]{cd_chromatin_state_overlap}
  \caption{}
\end{figure}


\begin{figure}
  \includegraphics[width=\textwidth]{tn5_tf_overlap}
  \caption{}
\end{figure}

\begin{figure}
  \includegraphics[width=\textwidth]{tn5_sensitivity_prob_by_chipseq_overlap_and_peak_signal}
  \caption{}
\end{figure}

\begin{figure}
  \includegraphics[width=0.4\textwidth]{nuclear_isolation_efficiency}
  \caption{}
\end{figure}


\begin{figure}
  \subfloat[]{\includegraphics[width=0.9\textwidth]{tss_coverage_different_methods}}\\
  \subfloat[]{\includegraphics[width=0.5\textwidth]{tss_coverage_positional_stability}}
  \caption{}
\end{figure}


\begin{figure}
  \includegraphics[width=0.5\textwidth]{tss_enrichment_housekeeping_vs_all}
  \caption{}
\end{figure}

\end{document}
